[
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "get_wifi_networks",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_wifi_networks() -> Tuple[str, str]:\n    \"\"\"returns a tuple of (os_name, network_name)\"\"\"\n    _os_name = platform.system()\n    return (_os_name, subprocess.check_output(MAP[_os_name], shell=True, text=True))\ndef process_unix_output(_output: str):\n    \"\"\"processes the result of listing networks in unix based OS\"\"\"\n    networks = []\n    # Access the captured stdout.\n    for x in _output.splitlines()[1:]:\n        networks.append(x.split()[1])",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "process_unix_output",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def process_unix_output(_output: str):\n    \"\"\"processes the result of listing networks in unix based OS\"\"\"\n    networks = []\n    # Access the captured stdout.\n    for x in _output.splitlines()[1:]:\n        networks.append(x.split()[1])\n    return list(set(networks))\ndef process_windows_output(_output: str):\n    \"\"\"processes the result of listing networks in windows based OS\"\"\"\n    networks = []",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "process_windows_output",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def process_windows_output(_output: str):\n    \"\"\"processes the result of listing networks in windows based OS\"\"\"\n    networks = []\n    for line in _output.splitlines():\n        try:\n            if line and line[0] != \" \":\n                networks.append(line.split(\":\")[1].strip())\n        except Exception as e:\n            print(e)\n            continue",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "printer",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def printer(networks: List[str]) -> None:\n    \"\"\"pretty prints a list of networks\"\"\"\n    print(f\"{Fore.LIGHTMAGENTA_EX}[+] Open Wifi networks in range: \\n\")\n    for ssid in list(set(networks)):\n        print(f\"{Fore.GREEN}[+] {ssid}\")\nif __name__ == \"__main__\":\n    os_name, output = get_wifi_networks()\n    if os_name == \"Windows\":\n        printer(process_windows_output(output))\n    if os_name == \"Linux\":",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "MAP",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "MAP = {\n    \"Windows\": \"netsh wlan show networks\",\n    \"Linux\": \"nmcli device wifi list\",\n}\ndef get_wifi_networks() -> Tuple[str, str]:\n    \"\"\"returns a tuple of (os_name, network_name)\"\"\"\n    _os_name = platform.system()\n    return (_os_name, subprocess.check_output(MAP[_os_name], shell=True, text=True))\ndef process_unix_output(_output: str):\n    \"\"\"processes the result of listing networks in unix based OS\"\"\"",
        "detail": "main",
        "documentation": {}
    }
]